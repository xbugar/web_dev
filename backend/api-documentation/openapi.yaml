openapi: 3.0.4
info:
  title: Swagger Gradia - OpenAPI 3.0
  description: >-
    This is a work in progress documentation for gradia REST API
  contact:
    email: ""

  version: 1.0.12

servers:
  - url: https://backend-511443014815.europe-west1.run.app
tags:
  - name: auth
    description: Auth operations
  - name: user
    description: Operations about user
  - name: notebook
    description: Everything about notebooks
  - name: note
    description: Note fetching and modification
  - name: tag
    description: Fetching data related to tags
  - name: event
    description: event
paths:

  #  /note:
  #    post:
  #      tags:
  #        - note
  #      summary:  Create a new note in a notebook specified by notebookId. v2
  #      description: Add a new note.
  #      operationId: addNotev2
  #      requestBody:
  #        description: Create a new note
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/CreateNotev2'
  #        required: true
  #      responses:
  #        '200':
  #          description: Successful operation
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/Note'
  #        '400':
  #          description: Invalid input
  #        '422':
  #          description: Validation exception
  #        default:
  #          description: Unexpected error
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/Error'

  /event:
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: Get all users tags
      description: Get
      operationId: getUserEvents
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: Create Event
      description: Post
      operationId: createUserEvents
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /event/{eventId}:
    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: delete Event
      description: Get
      operationId: getUserEvents
      parameters:
        - name: eventId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: update Event
      description: Get
      operationId: getUserEvents
      parameters:
        - name: eventId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEvent'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /event/{eventId}/tag:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: adds a tag to a note.
      description: ""
      operationId: addTagToNote
      parameters:
        - name: eventId
          in: path
          description: id of note
          required: true
          schema:
            type: string
      requestBody:
        description: Name and color of a tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagNameColor'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /event/{eventId}/tag/{tagId}:

    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - event
      summary: removes tag from note.
      description: ""
      operationId: removeTagFromNote
      parameters:
        - name: eventId
          in: path
          description: id of note
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          description: id of tag
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



  /note/{noteId}:
    put:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: Update the metadata (anything but content) of a note
      description: Update
      operationId: updateNoteMetadata
      parameters:
        - name: noteId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNote'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: 'Retrieves metadata of a note'
      description: ''
      operationId: getNoteById
      parameters:
        - name: noteId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: withTags
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteWithTags'
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: Deletes a note.
      description: Delete a note.
      operationId: deleteNote
      parameters:
        - name: noteId
          in: path
          description: Note id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Note deleted
        '400':
          description: Invalid note id
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /note/{noteId}/content:
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: 'Retrieves the content of a note'
      description: 'fdsafdsa'
      operationId: getNoteContent
      parameters:
        - name: noteId
          in: path
          description: ID of note content to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                required:
                  - content
        '400':
          description: Invalid ID supplied
        '404':
          description: Note not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: Change the content of the note
      description: Save the content to the server
      operationId: saveNote
      parameters:
        - name: noteId
          in: path
          description: Note id to save
          required: true
          schema:
            type: string
      requestBody:
        description: String representing the content of a note
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
        required: true
      responses:
        '200':
          description: Note content saved
        '400':
          description: Note not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /note/{noteId}/tag:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: adds a tag to a note.
      description: ""
      operationId: addTagToNote
      parameters:
        - name: noteId
          in: path
          description: id of note
          required: true
          schema:
            type: string
      requestBody:
        description: Name and color of a tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagNameColor'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /note/{noteId}/tag/{tagId}:

    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - note
      summary: removes tag from note.
      description: ""
      operationId: removeTagFromNote
      parameters:
        - name: noteId
          in: path
          description: id of note
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          description: id of tag
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notebook:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Add a new notebook. v2
      description: Add a new notebook.
      operationId: addNotebookv2
      requestBody:
        description: Create a new notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotebookv2'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notebook/{notebookId}:
    put:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Update an existing notebook.
      description: Update an existing notebook by Id.
      operationId: updateNotebook
      parameters:
        - name: notebookId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        description: new metadata for the notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotebook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid ID supplied
        '404':
          description: Notebook not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Find notebook by ID.
      description: Returns a single notebook.
      operationId: getNotebookById
      parameters:
        - name: notebookId
          in: path
          description: ID of notebook to return
          required: true
          schema:
            type: string
        - name: withTags
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'

        '400':
          description: Invalid ID supplied
        '404':
          description: Notebook not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Deletes a notebook.
      description: Delete a notebook.
      operationId: deleteNotebook
      parameters:
        - name: notebookId
          in: path
          description: Notebook id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Note deleted
        '400':
          description: Invalid notebookId value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notebook/{notebookId}/note:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Create a new note in a notebook specified by notebookId.
      description: Add a new note.
      operationId: addNote
      parameters:
        - name: notebookId
          in: path
          description: ID of notebook
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new note
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNote'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notebook/{notebookId}/notes:
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: Fetches the list of notes in a notebook.
      description: Returns a single notebook.
      operationId: getNotesFromNotebook
      parameters:
        - name: notebookId
          in: path
          description: ID of notebook
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '400':
          description: Invalid ID supplied
        '404':
          description: Notebook not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notebook/{notebookId}/tag:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: adds a tag to a notebook.
      description: ""
      operationId: addTagTonotebook
      parameters:
        - name: notebookId
          in: path
          description: id of notebook
          required: true
          schema:
            type: string
      requestBody:
        description: Name and color of a tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagNameColor'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notebook/{notebookId}/tag/{tagId}:
    delete:
      security:
        - cookieAuth: [ ]
      tags:
        - notebook
      summary: removes tag from  notebook.
      description: ""
      operationId: removeTagFromnotebook
      parameters:
        - name: notebookId
          in: path
          description: id of notebook
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          description: id of tag
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/status:
    get:
      tags:
        - auth
      summary: Check the session status
      operationId: checkStatus
      responses:
        '200':
          description: session still active
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: session expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user.
      description: Logins a  user
      operationId: loginUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: successful operation, this is probably not the correct way to access teh sessionId its here just for debugging purposes
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - auth
      summary: Register user.
      description: Registers a  user
      operationId: registerUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: successful operation
        #          content:
        #           application/json:
        #            schema:
        #             type: object
        #            properties:
        #             sessionId:
        #              type: string

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - auth
      summary: Logout user.
      description: Logouts a user
      operationId: LogoutUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: Creates a new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - user
      summary: Get user by id.
      description: Get user detail based on id.
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/notebooks:
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - user
      summary: Get users notebooks
      description: Get users notebooks based on the sessionId
      operationId: getUserNotebooksByID
      parameters:
        - name: withTags
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notebook'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/notebook:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - user
      summary: Add a new notebook.
      description: Add a new notebook.
      operationId: addNotebook
      requestBody:
        description: Create a new notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotebook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /tag:
    post:
      security:
        - cookieAuth: [ ]
      tags:
        - tag
      summary: Create tag
      description: Creates a new tag
      operationId: createTag
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTag'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - tag
      summary: Get all existing tags
      operationId: getAllTags
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tag/{tagId}:
    get:
      security:
        - cookieAuth: [ ]
      tags:
        - tag
      summary: Get tag by id.
      description: Get tag detail based on id.
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - cookieAuth: [ ]
      tags:
        - tag
      summary: Update tag resource.
      description: This can only be done by the logged in user.
      operationId: updateTag
      parameters:
        - name: tagId
          in: path
          description: id that need to be modified
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'

      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: tag not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    TagNameColor:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        userId:
          description: This might not be necessary when auth is fully implemented but for now there is no way around this
          type: string
      required:
        name
        color

    CreateNote:
      type: object
      properties:
        title:
          type: string

    CreateNotev2:
      type: object
      properties:
        title:
          type: string
        notebookId:
          type: string
      required:
        - notebookId
        - title
    
    NoteWithTags:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        tags:
          $ref: "#/components/schemas/TagArray"
        notebook:
          type: object
          properties:
            id:
              type: string
            color:
              type: string

    CreateEvent:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        timeFrom:
          type: string
        timeTo:
          type: string
        repeat:
          type: string
          enum:
            - Never
            - Every Day
            - Every Week
            - Every 2 Weeks
            - Every Month
      required:
        - title
        - timeFrom
        - timeTo
        - repeat


    UpdateEvent:
      type: object
      properties:        
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        timeFrom:
          type: string
        timeTo:
          type: string
        repeat:
          type: string
          enum:
            - Never
            - Every Day
            - Every Week
            - Every 2 Weeks
            - Every Month





    Event:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
        timeFrom:
          type: string
        timeTo:
          type: string


    Note:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        notebook:
          type: object
          properties:
            id:
              type: string
            color:
              type: string
    
    
    User:
      type: object
      properties:
        id:
          type: string
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    
    ResponseUser:
      type: object
      properties:
        id:
          type: string
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com

    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'

    RegisterUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        confirmPassword:
          type: string
          example: '12345'

    LogoutUser:
      type: object
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    
    ProfilePicture:
      type: object
      properties:
        id:
          type: string
    
    Notebook:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        color:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        iconName:
          type: string
        tags:
          $ref: "#/components/schemas/TagArray"
        noteCount:
          type: integer



    CreateNotebook:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        color:
          type: string
          enum:
            - blue
            - purple
            - orange
            - green
            - red
            - pink
        iconName:
          type: string

    CreateNotebookv2:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        color:
          type: string
        iconName:
          type: string

    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        color:
          type: string
          enum:
            - blue
            - purple
            - yellow
            - green
            - red
            - pink
          example: blue


    CreateTag:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
          enum:
            - blue
            - purple
            - yellow
            - green
            - red
            - pink
          example: blue


    TagArray:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string


    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:

    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
