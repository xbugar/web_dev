generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String @id @default(uuid()) @db.Uuid
    firstName String
    lastName  String
    email     String @unique

    isAdmin  Boolean @default(false)
    password String

    profilePicture   ProfilePicture? @relation(fields: [profilePictureId], references: [id])
    profilePictureId String?         @db.Uuid
    notebooks        Notebook[]
    events           Event[]
    flashDecks       FlashDeck[]
    tags             Tag[]

    @@index([email, lastName, firstName])
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model ProfilePicture {
    id      String @id @default(uuid()) @db.Uuid
    picture Bytes

    users User[]
}

model Notebook {
    id String @id @default(uuid()) @db.Uuid

    title       String
    description String?
    color       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @db.Uuid
    icon       Icon?       @relation(fields: [iconName], references: [name])
    iconName   String?     @db.Text
    notes      Note[]
    flashDecks FlashDeck[]
    tags       Tag[]

    @@index([userId, updatedAt])
    @@index([userId, title])
}

model Note {
    id String @id @default(uuid()) @db.Uuid

    title   String
    content String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
    notebookId String   @db.Uuid
    tags       Tag[]

    @@index([notebookId, title])
}

model Event {
    id String @id @default(uuid()) @db.Uuid

    title       String
    description String?
    timeFrom    DateTime
    timeTo      DateTime
    repeat      String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid
    tags   Tag[]

    @@index([userId, title])
}

model FlashDeck {
    id String @id @default(uuid()) @db.Uuid

    title       String
    description String @default("")
    color       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @db.Uuid
    icon       Icon        @relation(fields: [iconName], references: [name])
    iconName   String      @db.Text
    notebook   Notebook?   @relation(fields: [notebookId], references: [id])
    notebookId String?     @db.Uuid
    flashCards FlashCard[]
    tags       Tag[]

    @@index([userId, updatedAt])
    @@index([userId, title])
}

model FlashCard {
    id String @id @default(uuid()) @db.Uuid

    question String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    flashDeck   FlashDeck     @relation(fields: [flashDeckId], references: [id], onDelete: Cascade)
    flashDeckId String        @db.Uuid
    answers     FlashAnswer[]

    @@index([flashDeckId])
}

model FlashAnswer {
    id String @id @default(uuid()) @db.Uuid

    answer    String  @default("")
    isCorrect Boolean @default(false)

    flashCard   FlashCard @relation(fields: [flashCardId], references: [id], onDelete: Cascade)
    flashCardId String    @db.Uuid
}

model Icon {
    name String @id @db.Text
    icon Bytes

    notebooks  Notebook[]
    flashDecks FlashDeck[]
}

model Tag {
    id    String @id @default(uuid()) @db.Uuid
    name  String
    color String

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @db.Uuid
    notebooks  Notebook[]
    flashDecks FlashDeck[]
    events     Event[]
    notes      Note[]

    @@index([userId])
}
