// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  Int    @id @default(autoincrement)
  username String @db.VarChar(31)
  email    String @unique

  hashed_password String
  password_salt   String
  profile_picture Bytes?

  Notebooks  Notebook[]
  Calendar   Calendar    @relation(fields: [user_id], references: [user_id])
  FlashDecks FlashDeck[]
}

model Admin {
  admin_id Int    @id @default(autoincrement)
  email    String @unique

  name            String
  hashed_password String
  password_salt   String

  Users User[]
}

model Notebook {
  notebook_id Int @id @default(autoincrement)
  user_id     Int

  title String   @db.VarChar(127)
  icon  Bytes?
  color String
  tags  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [user_id], references: [user_id])
  Notes      Note[]
  FlashDecks FlashDeck[]
}

model Note {
  note_id     Int @id @default(autoincrement)
  notebook_id Int @unique

  title   String   @db.VarChar(127)
  content String   @default("")
  tags    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notebook Notebook @relation(fields: [notebook_id], references: [notebook_id])
}

model Calendar {
  calendar_id Int @id @default(autoincrement)
  user_id     Int @unique

  title String  @db.VarChar(127)
  color String?

  user   User    @relation(fields: [user_id], references: [user_id])
  Events Event[]
}

model Event {
  event_id   Int @id @default(autoincrement)
  subject_id Int

  title       String   @db.VarChar(127)
  description String   @default("") @db.VarChar(511)
  tags        String[]
  color       String?

  calendar   Calendar     @relation(fields: [subject_id], references: [calendar_id])
  EventTimes Event_time[]
}

model Event_time {
  event_time_id Int @id @default(autoincrement)
  event_id      Int

  date       DateTime
  start_time DateTime
  end_time   DateTime
  repeats    String?

  event Event @relation(fields: [event_id], references: [event_id])
}

model FlashDeck {
  flashdeck_id Int  @id @default(autoincrement)
  user_id      Int
  notebook_id  Int?

  title       String
  description String   @default("")
  color       String?
  icon        Bytes?
  tags        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [user_id], references: [user_id])
  notebook   Notebook?   @relation(fields: [notebook_id], references: [notebook_id])
  FlashCards FlashCard[]
}

model FlashCard {
  flashcard_id Int @id @default(autoincrement)
  deck_id      Int

  question String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flashDeck FlashDeck         @relation(fields: [deck_id], references: [flashcard_id])
  Answers   FlashCardAnswer[]
}

model FlashCardAnswer {
  answer_id    Int @id @default(autoincrement)
  flashcard_id Int

  answer     String  @default("")
  is_correct Boolean @default(false)

  flashCard FlashCard @relation(fields: [flashcard_id], references: [flashcard_id])
}
